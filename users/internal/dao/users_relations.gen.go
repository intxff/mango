// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/intxff/mango/users/internal/models"
)

func newUsersRelation(db *gorm.DB, opts ...gen.DOOption) usersRelation {
	_usersRelation := usersRelation{}

	_usersRelation.usersRelationDo.UseDB(db, opts...)
	_usersRelation.usersRelationDo.UseModel(&models.UsersRelation{})

	tableName := _usersRelation.usersRelationDo.TableName()
	_usersRelation.ALL = field.NewAsterisk(tableName)
	_usersRelation.UsersRelationsID = field.NewUint64(tableName, "users_relations_id")
	_usersRelation.UserID = field.NewUint64(tableName, "user_id")
	_usersRelation.RelatedUserID = field.NewUint64(tableName, "related_user_id")
	_usersRelation.Relation = field.NewString(tableName, "relation")
	_usersRelation.CreatedAt = field.NewTime(tableName, "created_at")
	_usersRelation.DeletedAt = field.NewField(tableName, "deleted_at")
	_usersRelation.UpdatedAt = field.NewTime(tableName, "updated_at")

	_usersRelation.fillFieldMap()

	return _usersRelation
}

type usersRelation struct {
	usersRelationDo usersRelationDo

	ALL              field.Asterisk
	UsersRelationsID field.Uint64
	UserID           field.Uint64
	RelatedUserID    field.Uint64
	Relation         field.String
	CreatedAt        field.Time
	DeletedAt        field.Field
	UpdatedAt        field.Time

	fieldMap map[string]field.Expr
}

func (u usersRelation) Table(newTableName string) *usersRelation {
	u.usersRelationDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u usersRelation) As(alias string) *usersRelation {
	u.usersRelationDo.DO = *(u.usersRelationDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *usersRelation) updateTableName(table string) *usersRelation {
	u.ALL = field.NewAsterisk(table)
	u.UsersRelationsID = field.NewUint64(table, "users_relations_id")
	u.UserID = field.NewUint64(table, "user_id")
	u.RelatedUserID = field.NewUint64(table, "related_user_id")
	u.Relation = field.NewString(table, "relation")
	u.CreatedAt = field.NewTime(table, "created_at")
	u.DeletedAt = field.NewField(table, "deleted_at")
	u.UpdatedAt = field.NewTime(table, "updated_at")

	u.fillFieldMap()

	return u
}

func (u *usersRelation) WithContext(ctx context.Context) IUsersRelationDo {
	return u.usersRelationDo.WithContext(ctx)
}

func (u usersRelation) TableName() string { return u.usersRelationDo.TableName() }

func (u usersRelation) Alias() string { return u.usersRelationDo.Alias() }

func (u *usersRelation) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *usersRelation) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 7)
	u.fieldMap["users_relations_id"] = u.UsersRelationsID
	u.fieldMap["user_id"] = u.UserID
	u.fieldMap["related_user_id"] = u.RelatedUserID
	u.fieldMap["relation"] = u.Relation
	u.fieldMap["created_at"] = u.CreatedAt
	u.fieldMap["deleted_at"] = u.DeletedAt
	u.fieldMap["updated_at"] = u.UpdatedAt
}

func (u usersRelation) clone(db *gorm.DB) usersRelation {
	u.usersRelationDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u usersRelation) replaceDB(db *gorm.DB) usersRelation {
	u.usersRelationDo.ReplaceDB(db)
	return u
}

type usersRelationDo struct{ gen.DO }

type IUsersRelationDo interface {
	gen.SubQuery
	Debug() IUsersRelationDo
	WithContext(ctx context.Context) IUsersRelationDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUsersRelationDo
	WriteDB() IUsersRelationDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUsersRelationDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUsersRelationDo
	Not(conds ...gen.Condition) IUsersRelationDo
	Or(conds ...gen.Condition) IUsersRelationDo
	Select(conds ...field.Expr) IUsersRelationDo
	Where(conds ...gen.Condition) IUsersRelationDo
	Order(conds ...field.Expr) IUsersRelationDo
	Distinct(cols ...field.Expr) IUsersRelationDo
	Omit(cols ...field.Expr) IUsersRelationDo
	Join(table schema.Tabler, on ...field.Expr) IUsersRelationDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUsersRelationDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUsersRelationDo
	Group(cols ...field.Expr) IUsersRelationDo
	Having(conds ...gen.Condition) IUsersRelationDo
	Limit(limit int) IUsersRelationDo
	Offset(offset int) IUsersRelationDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUsersRelationDo
	Unscoped() IUsersRelationDo
	Create(values ...*models.UsersRelation) error
	CreateInBatches(values []*models.UsersRelation, batchSize int) error
	Save(values ...*models.UsersRelation) error
	First() (*models.UsersRelation, error)
	Take() (*models.UsersRelation, error)
	Last() (*models.UsersRelation, error)
	Find() ([]*models.UsersRelation, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.UsersRelation, err error)
	FindInBatches(result *[]*models.UsersRelation, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.UsersRelation) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUsersRelationDo
	Assign(attrs ...field.AssignExpr) IUsersRelationDo
	Joins(fields ...field.RelationField) IUsersRelationDo
	Preload(fields ...field.RelationField) IUsersRelationDo
	FirstOrInit() (*models.UsersRelation, error)
	FirstOrCreate() (*models.UsersRelation, error)
	FindByPage(offset int, limit int) (result []*models.UsersRelation, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUsersRelationDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u usersRelationDo) Debug() IUsersRelationDo {
	return u.withDO(u.DO.Debug())
}

func (u usersRelationDo) WithContext(ctx context.Context) IUsersRelationDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u usersRelationDo) ReadDB() IUsersRelationDo {
	return u.Clauses(dbresolver.Read)
}

func (u usersRelationDo) WriteDB() IUsersRelationDo {
	return u.Clauses(dbresolver.Write)
}

func (u usersRelationDo) Session(config *gorm.Session) IUsersRelationDo {
	return u.withDO(u.DO.Session(config))
}

func (u usersRelationDo) Clauses(conds ...clause.Expression) IUsersRelationDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u usersRelationDo) Returning(value interface{}, columns ...string) IUsersRelationDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u usersRelationDo) Not(conds ...gen.Condition) IUsersRelationDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u usersRelationDo) Or(conds ...gen.Condition) IUsersRelationDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u usersRelationDo) Select(conds ...field.Expr) IUsersRelationDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u usersRelationDo) Where(conds ...gen.Condition) IUsersRelationDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u usersRelationDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IUsersRelationDo {
	return u.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (u usersRelationDo) Order(conds ...field.Expr) IUsersRelationDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u usersRelationDo) Distinct(cols ...field.Expr) IUsersRelationDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u usersRelationDo) Omit(cols ...field.Expr) IUsersRelationDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u usersRelationDo) Join(table schema.Tabler, on ...field.Expr) IUsersRelationDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u usersRelationDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUsersRelationDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u usersRelationDo) RightJoin(table schema.Tabler, on ...field.Expr) IUsersRelationDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u usersRelationDo) Group(cols ...field.Expr) IUsersRelationDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u usersRelationDo) Having(conds ...gen.Condition) IUsersRelationDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u usersRelationDo) Limit(limit int) IUsersRelationDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u usersRelationDo) Offset(offset int) IUsersRelationDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u usersRelationDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUsersRelationDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u usersRelationDo) Unscoped() IUsersRelationDo {
	return u.withDO(u.DO.Unscoped())
}

func (u usersRelationDo) Create(values ...*models.UsersRelation) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u usersRelationDo) CreateInBatches(values []*models.UsersRelation, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u usersRelationDo) Save(values ...*models.UsersRelation) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u usersRelationDo) First() (*models.UsersRelation, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.UsersRelation), nil
	}
}

func (u usersRelationDo) Take() (*models.UsersRelation, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.UsersRelation), nil
	}
}

func (u usersRelationDo) Last() (*models.UsersRelation, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.UsersRelation), nil
	}
}

func (u usersRelationDo) Find() ([]*models.UsersRelation, error) {
	result, err := u.DO.Find()
	return result.([]*models.UsersRelation), err
}

func (u usersRelationDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.UsersRelation, err error) {
	buf := make([]*models.UsersRelation, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u usersRelationDo) FindInBatches(result *[]*models.UsersRelation, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u usersRelationDo) Attrs(attrs ...field.AssignExpr) IUsersRelationDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u usersRelationDo) Assign(attrs ...field.AssignExpr) IUsersRelationDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u usersRelationDo) Joins(fields ...field.RelationField) IUsersRelationDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u usersRelationDo) Preload(fields ...field.RelationField) IUsersRelationDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u usersRelationDo) FirstOrInit() (*models.UsersRelation, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.UsersRelation), nil
	}
}

func (u usersRelationDo) FirstOrCreate() (*models.UsersRelation, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.UsersRelation), nil
	}
}

func (u usersRelationDo) FindByPage(offset int, limit int) (result []*models.UsersRelation, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u usersRelationDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u usersRelationDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u usersRelationDo) Delete(models ...*models.UsersRelation) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *usersRelationDo) withDO(do gen.Dao) *usersRelationDo {
	u.DO = *do.(*gen.DO)
	return u
}
