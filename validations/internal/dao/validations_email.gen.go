// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newValidationsEmail(db *gorm.DB, opts ...gen.DOOption) validationsEmail {
	_validationsEmail := validationsEmail{}

	_validationsEmail.validationsEmailDo.UseDB(db, opts...)
	_validationsEmail.validationsEmailDo.UseModel(&models.ValidationsEmail{})

	tableName := _validationsEmail.validationsEmailDo.TableName()
	_validationsEmail.ALL = field.NewAsterisk(tableName)
	_validationsEmail.ValidationEmailID = field.NewUint64(tableName, "validation_email_id")
	_validationsEmail.Code = field.NewString(tableName, "code")
	_validationsEmail.CreatedAt = field.NewTime(tableName, "created_at")
	_validationsEmail.DeletedAt = field.NewField(tableName, "deleted_at")
	_validationsEmail.UpdatedAt = field.NewTime(tableName, "updated_at")

	_validationsEmail.fillFieldMap()

	return _validationsEmail
}

type validationsEmail struct {
	validationsEmailDo validationsEmailDo

	ALL               field.Asterisk
	ValidationEmailID field.Uint64
	Code              field.String
	CreatedAt         field.Time
	DeletedAt         field.Field
	UpdatedAt         field.Time

	fieldMap map[string]field.Expr
}

func (v validationsEmail) Table(newTableName string) *validationsEmail {
	v.validationsEmailDo.UseTable(newTableName)
	return v.updateTableName(newTableName)
}

func (v validationsEmail) As(alias string) *validationsEmail {
	v.validationsEmailDo.DO = *(v.validationsEmailDo.As(alias).(*gen.DO))
	return v.updateTableName(alias)
}

func (v *validationsEmail) updateTableName(table string) *validationsEmail {
	v.ALL = field.NewAsterisk(table)
	v.ValidationEmailID = field.NewUint64(table, "validation_email_id")
	v.Code = field.NewString(table, "code")
	v.CreatedAt = field.NewTime(table, "created_at")
	v.DeletedAt = field.NewField(table, "deleted_at")
	v.UpdatedAt = field.NewTime(table, "updated_at")

	v.fillFieldMap()

	return v
}

func (v *validationsEmail) WithContext(ctx context.Context) IValidationsEmailDo {
	return v.validationsEmailDo.WithContext(ctx)
}

func (v validationsEmail) TableName() string { return v.validationsEmailDo.TableName() }

func (v validationsEmail) Alias() string { return v.validationsEmailDo.Alias() }

func (v *validationsEmail) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := v.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (v *validationsEmail) fillFieldMap() {
	v.fieldMap = make(map[string]field.Expr, 5)
	v.fieldMap["validation_email_id"] = v.ValidationEmailID
	v.fieldMap["code"] = v.Code
	v.fieldMap["created_at"] = v.CreatedAt
	v.fieldMap["deleted_at"] = v.DeletedAt
	v.fieldMap["updated_at"] = v.UpdatedAt
}

func (v validationsEmail) clone(db *gorm.DB) validationsEmail {
	v.validationsEmailDo.ReplaceConnPool(db.Statement.ConnPool)
	return v
}

func (v validationsEmail) replaceDB(db *gorm.DB) validationsEmail {
	v.validationsEmailDo.ReplaceDB(db)
	return v
}

type validationsEmailDo struct{ gen.DO }

type IValidationsEmailDo interface {
	gen.SubQuery
	Debug() IValidationsEmailDo
	WithContext(ctx context.Context) IValidationsEmailDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IValidationsEmailDo
	WriteDB() IValidationsEmailDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IValidationsEmailDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IValidationsEmailDo
	Not(conds ...gen.Condition) IValidationsEmailDo
	Or(conds ...gen.Condition) IValidationsEmailDo
	Select(conds ...field.Expr) IValidationsEmailDo
	Where(conds ...gen.Condition) IValidationsEmailDo
	Order(conds ...field.Expr) IValidationsEmailDo
	Distinct(cols ...field.Expr) IValidationsEmailDo
	Omit(cols ...field.Expr) IValidationsEmailDo
	Join(table schema.Tabler, on ...field.Expr) IValidationsEmailDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IValidationsEmailDo
	RightJoin(table schema.Tabler, on ...field.Expr) IValidationsEmailDo
	Group(cols ...field.Expr) IValidationsEmailDo
	Having(conds ...gen.Condition) IValidationsEmailDo
	Limit(limit int) IValidationsEmailDo
	Offset(offset int) IValidationsEmailDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IValidationsEmailDo
	Unscoped() IValidationsEmailDo
	Create(values ...*models.ValidationsEmail) error
	CreateInBatches(values []*models.ValidationsEmail, batchSize int) error
	Save(values ...*models.ValidationsEmail) error
	First() (*models.ValidationsEmail, error)
	Take() (*models.ValidationsEmail, error)
	Last() (*models.ValidationsEmail, error)
	Find() ([]*models.ValidationsEmail, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.ValidationsEmail, err error)
	FindInBatches(result *[]*models.ValidationsEmail, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.ValidationsEmail) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IValidationsEmailDo
	Assign(attrs ...field.AssignExpr) IValidationsEmailDo
	Joins(fields ...field.RelationField) IValidationsEmailDo
	Preload(fields ...field.RelationField) IValidationsEmailDo
	FirstOrInit() (*models.ValidationsEmail, error)
	FirstOrCreate() (*models.ValidationsEmail, error)
	FindByPage(offset int, limit int) (result []*models.ValidationsEmail, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IValidationsEmailDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (v validationsEmailDo) Debug() IValidationsEmailDo {
	return v.withDO(v.DO.Debug())
}

func (v validationsEmailDo) WithContext(ctx context.Context) IValidationsEmailDo {
	return v.withDO(v.DO.WithContext(ctx))
}

func (v validationsEmailDo) ReadDB() IValidationsEmailDo {
	return v.Clauses(dbresolver.Read)
}

func (v validationsEmailDo) WriteDB() IValidationsEmailDo {
	return v.Clauses(dbresolver.Write)
}

func (v validationsEmailDo) Session(config *gorm.Session) IValidationsEmailDo {
	return v.withDO(v.DO.Session(config))
}

func (v validationsEmailDo) Clauses(conds ...clause.Expression) IValidationsEmailDo {
	return v.withDO(v.DO.Clauses(conds...))
}

func (v validationsEmailDo) Returning(value interface{}, columns ...string) IValidationsEmailDo {
	return v.withDO(v.DO.Returning(value, columns...))
}

func (v validationsEmailDo) Not(conds ...gen.Condition) IValidationsEmailDo {
	return v.withDO(v.DO.Not(conds...))
}

func (v validationsEmailDo) Or(conds ...gen.Condition) IValidationsEmailDo {
	return v.withDO(v.DO.Or(conds...))
}

func (v validationsEmailDo) Select(conds ...field.Expr) IValidationsEmailDo {
	return v.withDO(v.DO.Select(conds...))
}

func (v validationsEmailDo) Where(conds ...gen.Condition) IValidationsEmailDo {
	return v.withDO(v.DO.Where(conds...))
}

func (v validationsEmailDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IValidationsEmailDo {
	return v.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (v validationsEmailDo) Order(conds ...field.Expr) IValidationsEmailDo {
	return v.withDO(v.DO.Order(conds...))
}

func (v validationsEmailDo) Distinct(cols ...field.Expr) IValidationsEmailDo {
	return v.withDO(v.DO.Distinct(cols...))
}

func (v validationsEmailDo) Omit(cols ...field.Expr) IValidationsEmailDo {
	return v.withDO(v.DO.Omit(cols...))
}

func (v validationsEmailDo) Join(table schema.Tabler, on ...field.Expr) IValidationsEmailDo {
	return v.withDO(v.DO.Join(table, on...))
}

func (v validationsEmailDo) LeftJoin(table schema.Tabler, on ...field.Expr) IValidationsEmailDo {
	return v.withDO(v.DO.LeftJoin(table, on...))
}

func (v validationsEmailDo) RightJoin(table schema.Tabler, on ...field.Expr) IValidationsEmailDo {
	return v.withDO(v.DO.RightJoin(table, on...))
}

func (v validationsEmailDo) Group(cols ...field.Expr) IValidationsEmailDo {
	return v.withDO(v.DO.Group(cols...))
}

func (v validationsEmailDo) Having(conds ...gen.Condition) IValidationsEmailDo {
	return v.withDO(v.DO.Having(conds...))
}

func (v validationsEmailDo) Limit(limit int) IValidationsEmailDo {
	return v.withDO(v.DO.Limit(limit))
}

func (v validationsEmailDo) Offset(offset int) IValidationsEmailDo {
	return v.withDO(v.DO.Offset(offset))
}

func (v validationsEmailDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IValidationsEmailDo {
	return v.withDO(v.DO.Scopes(funcs...))
}

func (v validationsEmailDo) Unscoped() IValidationsEmailDo {
	return v.withDO(v.DO.Unscoped())
}

func (v validationsEmailDo) Create(values ...*models.ValidationsEmail) error {
	if len(values) == 0 {
		return nil
	}
	return v.DO.Create(values)
}

func (v validationsEmailDo) CreateInBatches(values []*models.ValidationsEmail, batchSize int) error {
	return v.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (v validationsEmailDo) Save(values ...*models.ValidationsEmail) error {
	if len(values) == 0 {
		return nil
	}
	return v.DO.Save(values)
}

func (v validationsEmailDo) First() (*models.ValidationsEmail, error) {
	if result, err := v.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.ValidationsEmail), nil
	}
}

func (v validationsEmailDo) Take() (*models.ValidationsEmail, error) {
	if result, err := v.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.ValidationsEmail), nil
	}
}

func (v validationsEmailDo) Last() (*models.ValidationsEmail, error) {
	if result, err := v.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.ValidationsEmail), nil
	}
}

func (v validationsEmailDo) Find() ([]*models.ValidationsEmail, error) {
	result, err := v.DO.Find()
	return result.([]*models.ValidationsEmail), err
}

func (v validationsEmailDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.ValidationsEmail, err error) {
	buf := make([]*models.ValidationsEmail, 0, batchSize)
	err = v.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (v validationsEmailDo) FindInBatches(result *[]*models.ValidationsEmail, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return v.DO.FindInBatches(result, batchSize, fc)
}

func (v validationsEmailDo) Attrs(attrs ...field.AssignExpr) IValidationsEmailDo {
	return v.withDO(v.DO.Attrs(attrs...))
}

func (v validationsEmailDo) Assign(attrs ...field.AssignExpr) IValidationsEmailDo {
	return v.withDO(v.DO.Assign(attrs...))
}

func (v validationsEmailDo) Joins(fields ...field.RelationField) IValidationsEmailDo {
	for _, _f := range fields {
		v = *v.withDO(v.DO.Joins(_f))
	}
	return &v
}

func (v validationsEmailDo) Preload(fields ...field.RelationField) IValidationsEmailDo {
	for _, _f := range fields {
		v = *v.withDO(v.DO.Preload(_f))
	}
	return &v
}

func (v validationsEmailDo) FirstOrInit() (*models.ValidationsEmail, error) {
	if result, err := v.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.ValidationsEmail), nil
	}
}

func (v validationsEmailDo) FirstOrCreate() (*models.ValidationsEmail, error) {
	if result, err := v.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.ValidationsEmail), nil
	}
}

func (v validationsEmailDo) FindByPage(offset int, limit int) (result []*models.ValidationsEmail, count int64, err error) {
	result, err = v.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = v.Offset(-1).Limit(-1).Count()
	return
}

func (v validationsEmailDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = v.Count()
	if err != nil {
		return
	}

	err = v.Offset(offset).Limit(limit).Scan(result)
	return
}

func (v validationsEmailDo) Scan(result interface{}) (err error) {
	return v.DO.Scan(result)
}

func (v validationsEmailDo) Delete(models ...*models.ValidationsEmail) (result gen.ResultInfo, err error) {
	return v.DO.Delete(models)
}

func (v *validationsEmailDo) withDO(do gen.Dao) *validationsEmailDo {
	v.DO = *do.(*gen.DO)
	return v
}
