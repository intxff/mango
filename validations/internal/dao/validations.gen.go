// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newValidation(db *gorm.DB, opts ...gen.DOOption) validation {
	_validation := validation{}

	_validation.validationDo.UseDB(db, opts...)
	_validation.validationDo.UseModel(&models.Validation{})

	tableName := _validation.validationDo.TableName()
	_validation.ALL = field.NewAsterisk(tableName)
	_validation.ValidationID = field.NewUint64(tableName, "validation_id")
	_validation.Class = field.NewString(tableName, "class")
	_validation.ObjectID = field.NewUint64(tableName, "object_id")
	_validation.CreatedAt = field.NewTime(tableName, "created_at")
	_validation.DeletedAt = field.NewField(tableName, "deleted_at")
	_validation.UpdatedAt = field.NewTime(tableName, "updated_at")

	_validation.fillFieldMap()

	return _validation
}

type validation struct {
	validationDo validationDo

	ALL          field.Asterisk
	ValidationID field.Uint64
	Class        field.String
	ObjectID     field.Uint64
	CreatedAt    field.Time
	DeletedAt    field.Field
	UpdatedAt    field.Time

	fieldMap map[string]field.Expr
}

func (v validation) Table(newTableName string) *validation {
	v.validationDo.UseTable(newTableName)
	return v.updateTableName(newTableName)
}

func (v validation) As(alias string) *validation {
	v.validationDo.DO = *(v.validationDo.As(alias).(*gen.DO))
	return v.updateTableName(alias)
}

func (v *validation) updateTableName(table string) *validation {
	v.ALL = field.NewAsterisk(table)
	v.ValidationID = field.NewUint64(table, "validation_id")
	v.Class = field.NewString(table, "class")
	v.ObjectID = field.NewUint64(table, "object_id")
	v.CreatedAt = field.NewTime(table, "created_at")
	v.DeletedAt = field.NewField(table, "deleted_at")
	v.UpdatedAt = field.NewTime(table, "updated_at")

	v.fillFieldMap()

	return v
}

func (v *validation) WithContext(ctx context.Context) IValidationDo {
	return v.validationDo.WithContext(ctx)
}

func (v validation) TableName() string { return v.validationDo.TableName() }

func (v validation) Alias() string { return v.validationDo.Alias() }

func (v *validation) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := v.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (v *validation) fillFieldMap() {
	v.fieldMap = make(map[string]field.Expr, 6)
	v.fieldMap["validation_id"] = v.ValidationID
	v.fieldMap["class"] = v.Class
	v.fieldMap["object_id"] = v.ObjectID
	v.fieldMap["created_at"] = v.CreatedAt
	v.fieldMap["deleted_at"] = v.DeletedAt
	v.fieldMap["updated_at"] = v.UpdatedAt
}

func (v validation) clone(db *gorm.DB) validation {
	v.validationDo.ReplaceConnPool(db.Statement.ConnPool)
	return v
}

func (v validation) replaceDB(db *gorm.DB) validation {
	v.validationDo.ReplaceDB(db)
	return v
}

type validationDo struct{ gen.DO }

type IValidationDo interface {
	gen.SubQuery
	Debug() IValidationDo
	WithContext(ctx context.Context) IValidationDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IValidationDo
	WriteDB() IValidationDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IValidationDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IValidationDo
	Not(conds ...gen.Condition) IValidationDo
	Or(conds ...gen.Condition) IValidationDo
	Select(conds ...field.Expr) IValidationDo
	Where(conds ...gen.Condition) IValidationDo
	Order(conds ...field.Expr) IValidationDo
	Distinct(cols ...field.Expr) IValidationDo
	Omit(cols ...field.Expr) IValidationDo
	Join(table schema.Tabler, on ...field.Expr) IValidationDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IValidationDo
	RightJoin(table schema.Tabler, on ...field.Expr) IValidationDo
	Group(cols ...field.Expr) IValidationDo
	Having(conds ...gen.Condition) IValidationDo
	Limit(limit int) IValidationDo
	Offset(offset int) IValidationDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IValidationDo
	Unscoped() IValidationDo
	Create(values ...*models.Validation) error
	CreateInBatches(values []*models.Validation, batchSize int) error
	Save(values ...*models.Validation) error
	First() (*models.Validation, error)
	Take() (*models.Validation, error)
	Last() (*models.Validation, error)
	Find() ([]*models.Validation, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.Validation, err error)
	FindInBatches(result *[]*models.Validation, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.Validation) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IValidationDo
	Assign(attrs ...field.AssignExpr) IValidationDo
	Joins(fields ...field.RelationField) IValidationDo
	Preload(fields ...field.RelationField) IValidationDo
	FirstOrInit() (*models.Validation, error)
	FirstOrCreate() (*models.Validation, error)
	FindByPage(offset int, limit int) (result []*models.Validation, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IValidationDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (v validationDo) Debug() IValidationDo {
	return v.withDO(v.DO.Debug())
}

func (v validationDo) WithContext(ctx context.Context) IValidationDo {
	return v.withDO(v.DO.WithContext(ctx))
}

func (v validationDo) ReadDB() IValidationDo {
	return v.Clauses(dbresolver.Read)
}

func (v validationDo) WriteDB() IValidationDo {
	return v.Clauses(dbresolver.Write)
}

func (v validationDo) Session(config *gorm.Session) IValidationDo {
	return v.withDO(v.DO.Session(config))
}

func (v validationDo) Clauses(conds ...clause.Expression) IValidationDo {
	return v.withDO(v.DO.Clauses(conds...))
}

func (v validationDo) Returning(value interface{}, columns ...string) IValidationDo {
	return v.withDO(v.DO.Returning(value, columns...))
}

func (v validationDo) Not(conds ...gen.Condition) IValidationDo {
	return v.withDO(v.DO.Not(conds...))
}

func (v validationDo) Or(conds ...gen.Condition) IValidationDo {
	return v.withDO(v.DO.Or(conds...))
}

func (v validationDo) Select(conds ...field.Expr) IValidationDo {
	return v.withDO(v.DO.Select(conds...))
}

func (v validationDo) Where(conds ...gen.Condition) IValidationDo {
	return v.withDO(v.DO.Where(conds...))
}

func (v validationDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IValidationDo {
	return v.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (v validationDo) Order(conds ...field.Expr) IValidationDo {
	return v.withDO(v.DO.Order(conds...))
}

func (v validationDo) Distinct(cols ...field.Expr) IValidationDo {
	return v.withDO(v.DO.Distinct(cols...))
}

func (v validationDo) Omit(cols ...field.Expr) IValidationDo {
	return v.withDO(v.DO.Omit(cols...))
}

func (v validationDo) Join(table schema.Tabler, on ...field.Expr) IValidationDo {
	return v.withDO(v.DO.Join(table, on...))
}

func (v validationDo) LeftJoin(table schema.Tabler, on ...field.Expr) IValidationDo {
	return v.withDO(v.DO.LeftJoin(table, on...))
}

func (v validationDo) RightJoin(table schema.Tabler, on ...field.Expr) IValidationDo {
	return v.withDO(v.DO.RightJoin(table, on...))
}

func (v validationDo) Group(cols ...field.Expr) IValidationDo {
	return v.withDO(v.DO.Group(cols...))
}

func (v validationDo) Having(conds ...gen.Condition) IValidationDo {
	return v.withDO(v.DO.Having(conds...))
}

func (v validationDo) Limit(limit int) IValidationDo {
	return v.withDO(v.DO.Limit(limit))
}

func (v validationDo) Offset(offset int) IValidationDo {
	return v.withDO(v.DO.Offset(offset))
}

func (v validationDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IValidationDo {
	return v.withDO(v.DO.Scopes(funcs...))
}

func (v validationDo) Unscoped() IValidationDo {
	return v.withDO(v.DO.Unscoped())
}

func (v validationDo) Create(values ...*models.Validation) error {
	if len(values) == 0 {
		return nil
	}
	return v.DO.Create(values)
}

func (v validationDo) CreateInBatches(values []*models.Validation, batchSize int) error {
	return v.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (v validationDo) Save(values ...*models.Validation) error {
	if len(values) == 0 {
		return nil
	}
	return v.DO.Save(values)
}

func (v validationDo) First() (*models.Validation, error) {
	if result, err := v.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.Validation), nil
	}
}

func (v validationDo) Take() (*models.Validation, error) {
	if result, err := v.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.Validation), nil
	}
}

func (v validationDo) Last() (*models.Validation, error) {
	if result, err := v.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.Validation), nil
	}
}

func (v validationDo) Find() ([]*models.Validation, error) {
	result, err := v.DO.Find()
	return result.([]*models.Validation), err
}

func (v validationDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.Validation, err error) {
	buf := make([]*models.Validation, 0, batchSize)
	err = v.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (v validationDo) FindInBatches(result *[]*models.Validation, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return v.DO.FindInBatches(result, batchSize, fc)
}

func (v validationDo) Attrs(attrs ...field.AssignExpr) IValidationDo {
	return v.withDO(v.DO.Attrs(attrs...))
}

func (v validationDo) Assign(attrs ...field.AssignExpr) IValidationDo {
	return v.withDO(v.DO.Assign(attrs...))
}

func (v validationDo) Joins(fields ...field.RelationField) IValidationDo {
	for _, _f := range fields {
		v = *v.withDO(v.DO.Joins(_f))
	}
	return &v
}

func (v validationDo) Preload(fields ...field.RelationField) IValidationDo {
	for _, _f := range fields {
		v = *v.withDO(v.DO.Preload(_f))
	}
	return &v
}

func (v validationDo) FirstOrInit() (*models.Validation, error) {
	if result, err := v.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.Validation), nil
	}
}

func (v validationDo) FirstOrCreate() (*models.Validation, error) {
	if result, err := v.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.Validation), nil
	}
}

func (v validationDo) FindByPage(offset int, limit int) (result []*models.Validation, count int64, err error) {
	result, err = v.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = v.Offset(-1).Limit(-1).Count()
	return
}

func (v validationDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = v.Count()
	if err != nil {
		return
	}

	err = v.Offset(offset).Limit(limit).Scan(result)
	return
}

func (v validationDo) Scan(result interface{}) (err error) {
	return v.DO.Scan(result)
}

func (v validationDo) Delete(models ...*models.Validation) (result gen.ResultInfo, err error) {
	return v.DO.Delete(models)
}

func (v *validationDo) withDO(do gen.Dao) *validationDo {
	v.DO = *do.(*gen.DO)
	return v
}
