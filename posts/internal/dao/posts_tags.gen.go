// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/intxff/mango/posts/internal/models"
)

func newPostsTag(db *gorm.DB, opts ...gen.DOOption) postsTag {
	_postsTag := postsTag{}

	_postsTag.postsTagDo.UseDB(db, opts...)
	_postsTag.postsTagDo.UseModel(&models.PostsTag{})

	tableName := _postsTag.postsTagDo.TableName()
	_postsTag.ALL = field.NewAsterisk(tableName)
	_postsTag.PostID = field.NewUint64(tableName, "post_id")
	_postsTag.TagID = field.NewUint64(tableName, "tag_id")

	_postsTag.fillFieldMap()

	return _postsTag
}

type postsTag struct {
	postsTagDo postsTagDo

	ALL    field.Asterisk
	PostID field.Uint64
	TagID  field.Uint64

	fieldMap map[string]field.Expr
}

func (p postsTag) Table(newTableName string) *postsTag {
	p.postsTagDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p postsTag) As(alias string) *postsTag {
	p.postsTagDo.DO = *(p.postsTagDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *postsTag) updateTableName(table string) *postsTag {
	p.ALL = field.NewAsterisk(table)
	p.PostID = field.NewUint64(table, "post_id")
	p.TagID = field.NewUint64(table, "tag_id")

	p.fillFieldMap()

	return p
}

func (p *postsTag) WithContext(ctx context.Context) IPostsTagDo { return p.postsTagDo.WithContext(ctx) }

func (p postsTag) TableName() string { return p.postsTagDo.TableName() }

func (p postsTag) Alias() string { return p.postsTagDo.Alias() }

func (p *postsTag) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *postsTag) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 2)
	p.fieldMap["post_id"] = p.PostID
	p.fieldMap["tag_id"] = p.TagID
}

func (p postsTag) clone(db *gorm.DB) postsTag {
	p.postsTagDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p postsTag) replaceDB(db *gorm.DB) postsTag {
	p.postsTagDo.ReplaceDB(db)
	return p
}

type postsTagDo struct{ gen.DO }

type IPostsTagDo interface {
	gen.SubQuery
	Debug() IPostsTagDo
	WithContext(ctx context.Context) IPostsTagDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPostsTagDo
	WriteDB() IPostsTagDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPostsTagDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPostsTagDo
	Not(conds ...gen.Condition) IPostsTagDo
	Or(conds ...gen.Condition) IPostsTagDo
	Select(conds ...field.Expr) IPostsTagDo
	Where(conds ...gen.Condition) IPostsTagDo
	Order(conds ...field.Expr) IPostsTagDo
	Distinct(cols ...field.Expr) IPostsTagDo
	Omit(cols ...field.Expr) IPostsTagDo
	Join(table schema.Tabler, on ...field.Expr) IPostsTagDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPostsTagDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPostsTagDo
	Group(cols ...field.Expr) IPostsTagDo
	Having(conds ...gen.Condition) IPostsTagDo
	Limit(limit int) IPostsTagDo
	Offset(offset int) IPostsTagDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPostsTagDo
	Unscoped() IPostsTagDo
	Create(values ...*models.PostsTag) error
	CreateInBatches(values []*models.PostsTag, batchSize int) error
	Save(values ...*models.PostsTag) error
	First() (*models.PostsTag, error)
	Take() (*models.PostsTag, error)
	Last() (*models.PostsTag, error)
	Find() ([]*models.PostsTag, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.PostsTag, err error)
	FindInBatches(result *[]*models.PostsTag, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.PostsTag) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPostsTagDo
	Assign(attrs ...field.AssignExpr) IPostsTagDo
	Joins(fields ...field.RelationField) IPostsTagDo
	Preload(fields ...field.RelationField) IPostsTagDo
	FirstOrInit() (*models.PostsTag, error)
	FirstOrCreate() (*models.PostsTag, error)
	FindByPage(offset int, limit int) (result []*models.PostsTag, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPostsTagDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p postsTagDo) Debug() IPostsTagDo {
	return p.withDO(p.DO.Debug())
}

func (p postsTagDo) WithContext(ctx context.Context) IPostsTagDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p postsTagDo) ReadDB() IPostsTagDo {
	return p.Clauses(dbresolver.Read)
}

func (p postsTagDo) WriteDB() IPostsTagDo {
	return p.Clauses(dbresolver.Write)
}

func (p postsTagDo) Session(config *gorm.Session) IPostsTagDo {
	return p.withDO(p.DO.Session(config))
}

func (p postsTagDo) Clauses(conds ...clause.Expression) IPostsTagDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p postsTagDo) Returning(value interface{}, columns ...string) IPostsTagDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p postsTagDo) Not(conds ...gen.Condition) IPostsTagDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p postsTagDo) Or(conds ...gen.Condition) IPostsTagDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p postsTagDo) Select(conds ...field.Expr) IPostsTagDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p postsTagDo) Where(conds ...gen.Condition) IPostsTagDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p postsTagDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IPostsTagDo {
	return p.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (p postsTagDo) Order(conds ...field.Expr) IPostsTagDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p postsTagDo) Distinct(cols ...field.Expr) IPostsTagDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p postsTagDo) Omit(cols ...field.Expr) IPostsTagDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p postsTagDo) Join(table schema.Tabler, on ...field.Expr) IPostsTagDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p postsTagDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPostsTagDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p postsTagDo) RightJoin(table schema.Tabler, on ...field.Expr) IPostsTagDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p postsTagDo) Group(cols ...field.Expr) IPostsTagDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p postsTagDo) Having(conds ...gen.Condition) IPostsTagDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p postsTagDo) Limit(limit int) IPostsTagDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p postsTagDo) Offset(offset int) IPostsTagDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p postsTagDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPostsTagDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p postsTagDo) Unscoped() IPostsTagDo {
	return p.withDO(p.DO.Unscoped())
}

func (p postsTagDo) Create(values ...*models.PostsTag) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p postsTagDo) CreateInBatches(values []*models.PostsTag, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p postsTagDo) Save(values ...*models.PostsTag) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p postsTagDo) First() (*models.PostsTag, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.PostsTag), nil
	}
}

func (p postsTagDo) Take() (*models.PostsTag, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.PostsTag), nil
	}
}

func (p postsTagDo) Last() (*models.PostsTag, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.PostsTag), nil
	}
}

func (p postsTagDo) Find() ([]*models.PostsTag, error) {
	result, err := p.DO.Find()
	return result.([]*models.PostsTag), err
}

func (p postsTagDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.PostsTag, err error) {
	buf := make([]*models.PostsTag, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p postsTagDo) FindInBatches(result *[]*models.PostsTag, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p postsTagDo) Attrs(attrs ...field.AssignExpr) IPostsTagDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p postsTagDo) Assign(attrs ...field.AssignExpr) IPostsTagDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p postsTagDo) Joins(fields ...field.RelationField) IPostsTagDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p postsTagDo) Preload(fields ...field.RelationField) IPostsTagDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p postsTagDo) FirstOrInit() (*models.PostsTag, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.PostsTag), nil
	}
}

func (p postsTagDo) FirstOrCreate() (*models.PostsTag, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.PostsTag), nil
	}
}

func (p postsTagDo) FindByPage(offset int, limit int) (result []*models.PostsTag, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p postsTagDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p postsTagDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p postsTagDo) Delete(models ...*models.PostsTag) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *postsTagDo) withDO(do gen.Dao) *postsTagDo {
	p.DO = *do.(*gen.DO)
	return p
}
