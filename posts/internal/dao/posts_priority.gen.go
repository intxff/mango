// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/intxff/mango/posts/internal/models"
)

func newPostsPriority(db *gorm.DB, opts ...gen.DOOption) postsPriority {
	_postsPriority := postsPriority{}

	_postsPriority.postsPriorityDo.UseDB(db, opts...)
	_postsPriority.postsPriorityDo.UseModel(&models.PostsPriority{})

	tableName := _postsPriority.postsPriorityDo.TableName()
	_postsPriority.ALL = field.NewAsterisk(tableName)
	_postsPriority.PostID = field.NewUint64(tableName, "post_id")
	_postsPriority.PostWeight = field.NewUint32(tableName, "post_weight")
	_postsPriority.CreatedAt = field.NewTime(tableName, "created_at")
	_postsPriority.DeletedAt = field.NewField(tableName, "deleted_at")
	_postsPriority.UpdatedAt = field.NewTime(tableName, "updated_at")

	_postsPriority.fillFieldMap()

	return _postsPriority
}

type postsPriority struct {
	postsPriorityDo postsPriorityDo

	ALL        field.Asterisk
	PostID     field.Uint64
	PostWeight field.Uint32
	CreatedAt  field.Time
	DeletedAt  field.Field
	UpdatedAt  field.Time

	fieldMap map[string]field.Expr
}

func (p postsPriority) Table(newTableName string) *postsPriority {
	p.postsPriorityDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p postsPriority) As(alias string) *postsPriority {
	p.postsPriorityDo.DO = *(p.postsPriorityDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *postsPriority) updateTableName(table string) *postsPriority {
	p.ALL = field.NewAsterisk(table)
	p.PostID = field.NewUint64(table, "post_id")
	p.PostWeight = field.NewUint32(table, "post_weight")
	p.CreatedAt = field.NewTime(table, "created_at")
	p.DeletedAt = field.NewField(table, "deleted_at")
	p.UpdatedAt = field.NewTime(table, "updated_at")

	p.fillFieldMap()

	return p
}

func (p *postsPriority) WithContext(ctx context.Context) IPostsPriorityDo {
	return p.postsPriorityDo.WithContext(ctx)
}

func (p postsPriority) TableName() string { return p.postsPriorityDo.TableName() }

func (p postsPriority) Alias() string { return p.postsPriorityDo.Alias() }

func (p *postsPriority) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *postsPriority) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 5)
	p.fieldMap["post_id"] = p.PostID
	p.fieldMap["post_weight"] = p.PostWeight
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["deleted_at"] = p.DeletedAt
	p.fieldMap["updated_at"] = p.UpdatedAt
}

func (p postsPriority) clone(db *gorm.DB) postsPriority {
	p.postsPriorityDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p postsPriority) replaceDB(db *gorm.DB) postsPriority {
	p.postsPriorityDo.ReplaceDB(db)
	return p
}

type postsPriorityDo struct{ gen.DO }

type IPostsPriorityDo interface {
	gen.SubQuery
	Debug() IPostsPriorityDo
	WithContext(ctx context.Context) IPostsPriorityDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPostsPriorityDo
	WriteDB() IPostsPriorityDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPostsPriorityDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPostsPriorityDo
	Not(conds ...gen.Condition) IPostsPriorityDo
	Or(conds ...gen.Condition) IPostsPriorityDo
	Select(conds ...field.Expr) IPostsPriorityDo
	Where(conds ...gen.Condition) IPostsPriorityDo
	Order(conds ...field.Expr) IPostsPriorityDo
	Distinct(cols ...field.Expr) IPostsPriorityDo
	Omit(cols ...field.Expr) IPostsPriorityDo
	Join(table schema.Tabler, on ...field.Expr) IPostsPriorityDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPostsPriorityDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPostsPriorityDo
	Group(cols ...field.Expr) IPostsPriorityDo
	Having(conds ...gen.Condition) IPostsPriorityDo
	Limit(limit int) IPostsPriorityDo
	Offset(offset int) IPostsPriorityDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPostsPriorityDo
	Unscoped() IPostsPriorityDo
	Create(values ...*models.PostsPriority) error
	CreateInBatches(values []*models.PostsPriority, batchSize int) error
	Save(values ...*models.PostsPriority) error
	First() (*models.PostsPriority, error)
	Take() (*models.PostsPriority, error)
	Last() (*models.PostsPriority, error)
	Find() ([]*models.PostsPriority, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.PostsPriority, err error)
	FindInBatches(result *[]*models.PostsPriority, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.PostsPriority) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPostsPriorityDo
	Assign(attrs ...field.AssignExpr) IPostsPriorityDo
	Joins(fields ...field.RelationField) IPostsPriorityDo
	Preload(fields ...field.RelationField) IPostsPriorityDo
	FirstOrInit() (*models.PostsPriority, error)
	FirstOrCreate() (*models.PostsPriority, error)
	FindByPage(offset int, limit int) (result []*models.PostsPriority, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPostsPriorityDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p postsPriorityDo) Debug() IPostsPriorityDo {
	return p.withDO(p.DO.Debug())
}

func (p postsPriorityDo) WithContext(ctx context.Context) IPostsPriorityDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p postsPriorityDo) ReadDB() IPostsPriorityDo {
	return p.Clauses(dbresolver.Read)
}

func (p postsPriorityDo) WriteDB() IPostsPriorityDo {
	return p.Clauses(dbresolver.Write)
}

func (p postsPriorityDo) Session(config *gorm.Session) IPostsPriorityDo {
	return p.withDO(p.DO.Session(config))
}

func (p postsPriorityDo) Clauses(conds ...clause.Expression) IPostsPriorityDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p postsPriorityDo) Returning(value interface{}, columns ...string) IPostsPriorityDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p postsPriorityDo) Not(conds ...gen.Condition) IPostsPriorityDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p postsPriorityDo) Or(conds ...gen.Condition) IPostsPriorityDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p postsPriorityDo) Select(conds ...field.Expr) IPostsPriorityDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p postsPriorityDo) Where(conds ...gen.Condition) IPostsPriorityDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p postsPriorityDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IPostsPriorityDo {
	return p.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (p postsPriorityDo) Order(conds ...field.Expr) IPostsPriorityDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p postsPriorityDo) Distinct(cols ...field.Expr) IPostsPriorityDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p postsPriorityDo) Omit(cols ...field.Expr) IPostsPriorityDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p postsPriorityDo) Join(table schema.Tabler, on ...field.Expr) IPostsPriorityDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p postsPriorityDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPostsPriorityDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p postsPriorityDo) RightJoin(table schema.Tabler, on ...field.Expr) IPostsPriorityDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p postsPriorityDo) Group(cols ...field.Expr) IPostsPriorityDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p postsPriorityDo) Having(conds ...gen.Condition) IPostsPriorityDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p postsPriorityDo) Limit(limit int) IPostsPriorityDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p postsPriorityDo) Offset(offset int) IPostsPriorityDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p postsPriorityDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPostsPriorityDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p postsPriorityDo) Unscoped() IPostsPriorityDo {
	return p.withDO(p.DO.Unscoped())
}

func (p postsPriorityDo) Create(values ...*models.PostsPriority) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p postsPriorityDo) CreateInBatches(values []*models.PostsPriority, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p postsPriorityDo) Save(values ...*models.PostsPriority) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p postsPriorityDo) First() (*models.PostsPriority, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.PostsPriority), nil
	}
}

func (p postsPriorityDo) Take() (*models.PostsPriority, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.PostsPriority), nil
	}
}

func (p postsPriorityDo) Last() (*models.PostsPriority, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.PostsPriority), nil
	}
}

func (p postsPriorityDo) Find() ([]*models.PostsPriority, error) {
	result, err := p.DO.Find()
	return result.([]*models.PostsPriority), err
}

func (p postsPriorityDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.PostsPriority, err error) {
	buf := make([]*models.PostsPriority, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p postsPriorityDo) FindInBatches(result *[]*models.PostsPriority, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p postsPriorityDo) Attrs(attrs ...field.AssignExpr) IPostsPriorityDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p postsPriorityDo) Assign(attrs ...field.AssignExpr) IPostsPriorityDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p postsPriorityDo) Joins(fields ...field.RelationField) IPostsPriorityDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p postsPriorityDo) Preload(fields ...field.RelationField) IPostsPriorityDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p postsPriorityDo) FirstOrInit() (*models.PostsPriority, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.PostsPriority), nil
	}
}

func (p postsPriorityDo) FirstOrCreate() (*models.PostsPriority, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.PostsPriority), nil
	}
}

func (p postsPriorityDo) FindByPage(offset int, limit int) (result []*models.PostsPriority, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p postsPriorityDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p postsPriorityDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p postsPriorityDo) Delete(models ...*models.PostsPriority) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *postsPriorityDo) withDO(do gen.Dao) *postsPriorityDo {
	p.DO = *do.(*gen.DO)
	return p
}
