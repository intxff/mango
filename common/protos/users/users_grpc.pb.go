// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: users/users.proto

package users

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Users_Create_FullMethodName               = "/Users/Create"
	Users_Delete_FullMethodName               = "/Users/Delete"
	Users_BatchDelete_FullMethodName          = "/Users/BatchDelete"
	Users_Get_FullMethodName                  = "/Users/Get"
	Users_List_FullMethodName                 = "/Users/List"
	Users_ListFollowers_FullMethodName        = "/Users/ListFollowers"
	Users_UpdatePassword_FullMethodName       = "/Users/UpdatePassword"
	Users_UpdateSlogan_FullMethodName         = "/Users/UpdateSlogan"
	Users_UpdateRole_FullMethodName           = "/Users/UpdateRole"
	Users_BatchUpdateRole_FullMethodName      = "/Users/BatchUpdateRole"
	Users_CreateFollowing_FullMethodName      = "/Users/CreateFollowing"
	Users_ListFollowing_FullMethodName        = "/Users/ListFollowing"
	Users_DeleteFollowing_FullMethodName      = "/Users/DeleteFollowing"
	Users_BatchDeleteFollowing_FullMethodName = "/Users/BatchDeleteFollowing"
	Users_CreateBlocked_FullMethodName        = "/Users/CreateBlocked"
	Users_ListBlocked_FullMethodName          = "/Users/ListBlocked"
	Users_DeleteBlocked_FullMethodName        = "/Users/DeleteBlocked"
	Users_BatchDeleteBlocked_FullMethodName   = "/Users/BatchDeleteBlocked"
)

// UsersClient is the client API for Users service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UsersClient interface {
	Create(ctx context.Context, in *CreateReq, opts ...grpc.CallOption) (*CreateResp, error)
	Delete(ctx context.Context, in *DeleteReq, opts ...grpc.CallOption) (*DeleteResp, error)
	BatchDelete(ctx context.Context, in *BatchDeleteReq, opts ...grpc.CallOption) (*DeleteResp, error)
	Get(ctx context.Context, in *GetReq, opts ...grpc.CallOption) (*GetResp, error)
	List(ctx context.Context, in *ListReq, opts ...grpc.CallOption) (*ListResp, error)
	ListFollowers(ctx context.Context, in *ListFollowersReq, opts ...grpc.CallOption) (*ListFollowersResp, error)
	UpdatePassword(ctx context.Context, in *UpdatePasswordReq, opts ...grpc.CallOption) (*UpdatePasswordResp, error)
	UpdateSlogan(ctx context.Context, in *UpdateSloganReq, opts ...grpc.CallOption) (*UpdateSloganResp, error)
	UpdateRole(ctx context.Context, in *UpdateRoleReq, opts ...grpc.CallOption) (*UpdateRoleResp, error)
	BatchUpdateRole(ctx context.Context, in *BatchUpdateRoleReq, opts ...grpc.CallOption) (*BatchUpdateRoleResp, error)
	CreateFollowing(ctx context.Context, in *CreateFollowingReq, opts ...grpc.CallOption) (*CreateFollowingResp, error)
	ListFollowing(ctx context.Context, in *ListFollowingReq, opts ...grpc.CallOption) (*ListFollowingResp, error)
	DeleteFollowing(ctx context.Context, in *DeleteFollowingReq, opts ...grpc.CallOption) (*DeleteFollowingResp, error)
	BatchDeleteFollowing(ctx context.Context, in *BatchDeleteFollowingReq, opts ...grpc.CallOption) (*BatchDeleteFollowingResp, error)
	CreateBlocked(ctx context.Context, in *CreateBlockedReq, opts ...grpc.CallOption) (*CreateBlockedResp, error)
	ListBlocked(ctx context.Context, in *ListBlockedReq, opts ...grpc.CallOption) (*ListBlockedResp, error)
	DeleteBlocked(ctx context.Context, in *DeleteBlockedReq, opts ...grpc.CallOption) (*DeleteBlockedResp, error)
	BatchDeleteBlocked(ctx context.Context, in *BatchDeleteBlockedReq, opts ...grpc.CallOption) (*BatchDeleteBlockedResp, error)
}

type usersClient struct {
	cc grpc.ClientConnInterface
}

func NewUsersClient(cc grpc.ClientConnInterface) UsersClient {
	return &usersClient{cc}
}

func (c *usersClient) Create(ctx context.Context, in *CreateReq, opts ...grpc.CallOption) (*CreateResp, error) {
	out := new(CreateResp)
	err := c.cc.Invoke(ctx, Users_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) Delete(ctx context.Context, in *DeleteReq, opts ...grpc.CallOption) (*DeleteResp, error) {
	out := new(DeleteResp)
	err := c.cc.Invoke(ctx, Users_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) BatchDelete(ctx context.Context, in *BatchDeleteReq, opts ...grpc.CallOption) (*DeleteResp, error) {
	out := new(DeleteResp)
	err := c.cc.Invoke(ctx, Users_BatchDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) Get(ctx context.Context, in *GetReq, opts ...grpc.CallOption) (*GetResp, error) {
	out := new(GetResp)
	err := c.cc.Invoke(ctx, Users_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) List(ctx context.Context, in *ListReq, opts ...grpc.CallOption) (*ListResp, error) {
	out := new(ListResp)
	err := c.cc.Invoke(ctx, Users_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) ListFollowers(ctx context.Context, in *ListFollowersReq, opts ...grpc.CallOption) (*ListFollowersResp, error) {
	out := new(ListFollowersResp)
	err := c.cc.Invoke(ctx, Users_ListFollowers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) UpdatePassword(ctx context.Context, in *UpdatePasswordReq, opts ...grpc.CallOption) (*UpdatePasswordResp, error) {
	out := new(UpdatePasswordResp)
	err := c.cc.Invoke(ctx, Users_UpdatePassword_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) UpdateSlogan(ctx context.Context, in *UpdateSloganReq, opts ...grpc.CallOption) (*UpdateSloganResp, error) {
	out := new(UpdateSloganResp)
	err := c.cc.Invoke(ctx, Users_UpdateSlogan_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) UpdateRole(ctx context.Context, in *UpdateRoleReq, opts ...grpc.CallOption) (*UpdateRoleResp, error) {
	out := new(UpdateRoleResp)
	err := c.cc.Invoke(ctx, Users_UpdateRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) BatchUpdateRole(ctx context.Context, in *BatchUpdateRoleReq, opts ...grpc.CallOption) (*BatchUpdateRoleResp, error) {
	out := new(BatchUpdateRoleResp)
	err := c.cc.Invoke(ctx, Users_BatchUpdateRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) CreateFollowing(ctx context.Context, in *CreateFollowingReq, opts ...grpc.CallOption) (*CreateFollowingResp, error) {
	out := new(CreateFollowingResp)
	err := c.cc.Invoke(ctx, Users_CreateFollowing_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) ListFollowing(ctx context.Context, in *ListFollowingReq, opts ...grpc.CallOption) (*ListFollowingResp, error) {
	out := new(ListFollowingResp)
	err := c.cc.Invoke(ctx, Users_ListFollowing_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) DeleteFollowing(ctx context.Context, in *DeleteFollowingReq, opts ...grpc.CallOption) (*DeleteFollowingResp, error) {
	out := new(DeleteFollowingResp)
	err := c.cc.Invoke(ctx, Users_DeleteFollowing_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) BatchDeleteFollowing(ctx context.Context, in *BatchDeleteFollowingReq, opts ...grpc.CallOption) (*BatchDeleteFollowingResp, error) {
	out := new(BatchDeleteFollowingResp)
	err := c.cc.Invoke(ctx, Users_BatchDeleteFollowing_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) CreateBlocked(ctx context.Context, in *CreateBlockedReq, opts ...grpc.CallOption) (*CreateBlockedResp, error) {
	out := new(CreateBlockedResp)
	err := c.cc.Invoke(ctx, Users_CreateBlocked_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) ListBlocked(ctx context.Context, in *ListBlockedReq, opts ...grpc.CallOption) (*ListBlockedResp, error) {
	out := new(ListBlockedResp)
	err := c.cc.Invoke(ctx, Users_ListBlocked_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) DeleteBlocked(ctx context.Context, in *DeleteBlockedReq, opts ...grpc.CallOption) (*DeleteBlockedResp, error) {
	out := new(DeleteBlockedResp)
	err := c.cc.Invoke(ctx, Users_DeleteBlocked_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) BatchDeleteBlocked(ctx context.Context, in *BatchDeleteBlockedReq, opts ...grpc.CallOption) (*BatchDeleteBlockedResp, error) {
	out := new(BatchDeleteBlockedResp)
	err := c.cc.Invoke(ctx, Users_BatchDeleteBlocked_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UsersServer is the server API for Users service.
// All implementations must embed UnimplementedUsersServer
// for forward compatibility
type UsersServer interface {
	Create(context.Context, *CreateReq) (*CreateResp, error)
	Delete(context.Context, *DeleteReq) (*DeleteResp, error)
	BatchDelete(context.Context, *BatchDeleteReq) (*DeleteResp, error)
	Get(context.Context, *GetReq) (*GetResp, error)
	List(context.Context, *ListReq) (*ListResp, error)
	ListFollowers(context.Context, *ListFollowersReq) (*ListFollowersResp, error)
	UpdatePassword(context.Context, *UpdatePasswordReq) (*UpdatePasswordResp, error)
	UpdateSlogan(context.Context, *UpdateSloganReq) (*UpdateSloganResp, error)
	UpdateRole(context.Context, *UpdateRoleReq) (*UpdateRoleResp, error)
	BatchUpdateRole(context.Context, *BatchUpdateRoleReq) (*BatchUpdateRoleResp, error)
	CreateFollowing(context.Context, *CreateFollowingReq) (*CreateFollowingResp, error)
	ListFollowing(context.Context, *ListFollowingReq) (*ListFollowingResp, error)
	DeleteFollowing(context.Context, *DeleteFollowingReq) (*DeleteFollowingResp, error)
	BatchDeleteFollowing(context.Context, *BatchDeleteFollowingReq) (*BatchDeleteFollowingResp, error)
	CreateBlocked(context.Context, *CreateBlockedReq) (*CreateBlockedResp, error)
	ListBlocked(context.Context, *ListBlockedReq) (*ListBlockedResp, error)
	DeleteBlocked(context.Context, *DeleteBlockedReq) (*DeleteBlockedResp, error)
	BatchDeleteBlocked(context.Context, *BatchDeleteBlockedReq) (*BatchDeleteBlockedResp, error)
	mustEmbedUnimplementedUsersServer()
}

// UnimplementedUsersServer must be embedded to have forward compatible implementations.
type UnimplementedUsersServer struct {
}

func (UnimplementedUsersServer) Create(context.Context, *CreateReq) (*CreateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedUsersServer) Delete(context.Context, *DeleteReq) (*DeleteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedUsersServer) BatchDelete(context.Context, *BatchDeleteReq) (*DeleteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchDelete not implemented")
}
func (UnimplementedUsersServer) Get(context.Context, *GetReq) (*GetResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedUsersServer) List(context.Context, *ListReq) (*ListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedUsersServer) ListFollowers(context.Context, *ListFollowersReq) (*ListFollowersResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFollowers not implemented")
}
func (UnimplementedUsersServer) UpdatePassword(context.Context, *UpdatePasswordReq) (*UpdatePasswordResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePassword not implemented")
}
func (UnimplementedUsersServer) UpdateSlogan(context.Context, *UpdateSloganReq) (*UpdateSloganResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSlogan not implemented")
}
func (UnimplementedUsersServer) UpdateRole(context.Context, *UpdateRoleReq) (*UpdateRoleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRole not implemented")
}
func (UnimplementedUsersServer) BatchUpdateRole(context.Context, *BatchUpdateRoleReq) (*BatchUpdateRoleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchUpdateRole not implemented")
}
func (UnimplementedUsersServer) CreateFollowing(context.Context, *CreateFollowingReq) (*CreateFollowingResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFollowing not implemented")
}
func (UnimplementedUsersServer) ListFollowing(context.Context, *ListFollowingReq) (*ListFollowingResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFollowing not implemented")
}
func (UnimplementedUsersServer) DeleteFollowing(context.Context, *DeleteFollowingReq) (*DeleteFollowingResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFollowing not implemented")
}
func (UnimplementedUsersServer) BatchDeleteFollowing(context.Context, *BatchDeleteFollowingReq) (*BatchDeleteFollowingResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchDeleteFollowing not implemented")
}
func (UnimplementedUsersServer) CreateBlocked(context.Context, *CreateBlockedReq) (*CreateBlockedResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBlocked not implemented")
}
func (UnimplementedUsersServer) ListBlocked(context.Context, *ListBlockedReq) (*ListBlockedResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBlocked not implemented")
}
func (UnimplementedUsersServer) DeleteBlocked(context.Context, *DeleteBlockedReq) (*DeleteBlockedResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBlocked not implemented")
}
func (UnimplementedUsersServer) BatchDeleteBlocked(context.Context, *BatchDeleteBlockedReq) (*BatchDeleteBlockedResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchDeleteBlocked not implemented")
}
func (UnimplementedUsersServer) mustEmbedUnimplementedUsersServer() {}

// UnsafeUsersServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UsersServer will
// result in compilation errors.
type UnsafeUsersServer interface {
	mustEmbedUnimplementedUsersServer()
}

func RegisterUsersServer(s grpc.ServiceRegistrar, srv UsersServer) {
	s.RegisterService(&Users_ServiceDesc, srv)
}

func _Users_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Users_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).Create(ctx, req.(*CreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Users_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).Delete(ctx, req.(*DeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_BatchDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).BatchDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Users_BatchDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).BatchDelete(ctx, req.(*BatchDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Users_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).Get(ctx, req.(*GetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Users_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).List(ctx, req.(*ListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_ListFollowers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFollowersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).ListFollowers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Users_ListFollowers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).ListFollowers(ctx, req.(*ListFollowersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_UpdatePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePasswordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).UpdatePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Users_UpdatePassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).UpdatePassword(ctx, req.(*UpdatePasswordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_UpdateSlogan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSloganReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).UpdateSlogan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Users_UpdateSlogan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).UpdateSlogan(ctx, req.(*UpdateSloganReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_UpdateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRoleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).UpdateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Users_UpdateRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).UpdateRole(ctx, req.(*UpdateRoleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_BatchUpdateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchUpdateRoleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).BatchUpdateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Users_BatchUpdateRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).BatchUpdateRole(ctx, req.(*BatchUpdateRoleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_CreateFollowing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFollowingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).CreateFollowing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Users_CreateFollowing_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).CreateFollowing(ctx, req.(*CreateFollowingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_ListFollowing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFollowingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).ListFollowing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Users_ListFollowing_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).ListFollowing(ctx, req.(*ListFollowingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_DeleteFollowing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFollowingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).DeleteFollowing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Users_DeleteFollowing_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).DeleteFollowing(ctx, req.(*DeleteFollowingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_BatchDeleteFollowing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchDeleteFollowingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).BatchDeleteFollowing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Users_BatchDeleteFollowing_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).BatchDeleteFollowing(ctx, req.(*BatchDeleteFollowingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_CreateBlocked_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBlockedReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).CreateBlocked(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Users_CreateBlocked_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).CreateBlocked(ctx, req.(*CreateBlockedReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_ListBlocked_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBlockedReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).ListBlocked(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Users_ListBlocked_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).ListBlocked(ctx, req.(*ListBlockedReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_DeleteBlocked_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBlockedReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).DeleteBlocked(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Users_DeleteBlocked_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).DeleteBlocked(ctx, req.(*DeleteBlockedReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_BatchDeleteBlocked_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchDeleteBlockedReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).BatchDeleteBlocked(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Users_BatchDeleteBlocked_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).BatchDeleteBlocked(ctx, req.(*BatchDeleteBlockedReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Users_ServiceDesc is the grpc.ServiceDesc for Users service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Users_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Users",
	HandlerType: (*UsersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Users_Create_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Users_Delete_Handler,
		},
		{
			MethodName: "BatchDelete",
			Handler:    _Users_BatchDelete_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Users_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Users_List_Handler,
		},
		{
			MethodName: "ListFollowers",
			Handler:    _Users_ListFollowers_Handler,
		},
		{
			MethodName: "UpdatePassword",
			Handler:    _Users_UpdatePassword_Handler,
		},
		{
			MethodName: "UpdateSlogan",
			Handler:    _Users_UpdateSlogan_Handler,
		},
		{
			MethodName: "UpdateRole",
			Handler:    _Users_UpdateRole_Handler,
		},
		{
			MethodName: "BatchUpdateRole",
			Handler:    _Users_BatchUpdateRole_Handler,
		},
		{
			MethodName: "CreateFollowing",
			Handler:    _Users_CreateFollowing_Handler,
		},
		{
			MethodName: "ListFollowing",
			Handler:    _Users_ListFollowing_Handler,
		},
		{
			MethodName: "DeleteFollowing",
			Handler:    _Users_DeleteFollowing_Handler,
		},
		{
			MethodName: "BatchDeleteFollowing",
			Handler:    _Users_BatchDeleteFollowing_Handler,
		},
		{
			MethodName: "CreateBlocked",
			Handler:    _Users_CreateBlocked_Handler,
		},
		{
			MethodName: "ListBlocked",
			Handler:    _Users_ListBlocked_Handler,
		},
		{
			MethodName: "DeleteBlocked",
			Handler:    _Users_DeleteBlocked_Handler,
		},
		{
			MethodName: "BatchDeleteBlocked",
			Handler:    _Users_BatchDeleteBlocked_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "users/users.proto",
}
